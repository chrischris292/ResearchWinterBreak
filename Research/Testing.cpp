//
//  Testing.cpp
//  Research
//
//  Created by Christopher Chan on 1/8/16.
//  Copyright Â© 2016 Christopher Chan. All rights reserved.
//

#include "Testing.hpp"
using namespace::std;

class Testing{
    /*
    vector<double> x = {1.00000000e-03,   1.19950000e-02,   2.29900000e-02,
        3.39850000e-02,   4.49800000e-02,   5.59750000e-02,
        6.69700000e-02,   7.79650000e-02,   8.89600000e-02,
        9.99550000e-02,   1.10950000e-01,   1.21945000e-01,
        1.32940000e-01,   1.43935000e-01,   1.54930000e-01,
        1.65925000e-01,   1.76920000e-01,   1.87915000e-01,
        1.98910000e-01,   2.09905000e-01,   2.20900000e-01,
        2.31895000e-01,   2.42890000e-01,   2.53885000e-01,
        2.64880000e-01,   2.75875000e-01,   2.86870000e-01,
        2.97865000e-01,   3.08860000e-01,   3.19855000e-01,
        3.30850000e-01,   3.41845000e-01,   3.52840000e-01,
        3.63835000e-01,   3.74830000e-01,   3.85825000e-01,
        3.96820000e-01,   4.07815000e-01,   4.18810000e-01,
        4.29805000e-01,   4.40800000e-01,   4.51795000e-01,
        4.62790000e-01,   4.73785000e-01,   4.84780000e-01,
        4.95775000e-01,   5.06770000e-01,   5.17765000e-01,
        5.28760000e-01,   5.39755000e-01,   5.50750000e-01,
        5.61745000e-01,   5.72740000e-01,   5.83735000e-01,
        5.94730000e-01,   6.05725000e-01,   6.16720000e-01,
        6.27715000e-01,   6.38710000e-01,   6.49705000e-01,
        6.60700000e-01,   6.71695000e-01,   6.82690000e-01,
        6.93685000e-01,   7.04680000e-01,   7.15675000e-01,
        7.26670000e-01,   7.37665000e-01,   7.48660000e-01,
        7.59655000e-01,   7.70650000e-01,   7.81645000e-01,
        7.92640000e-01,   8.03635000e-01,   8.14630000e-01,
        8.25625000e-01,   8.36620000e-01,   8.47615000e-01,
        8.58610000e-01,   8.69605000e-01,   8.80600000e-01,
        8.91595000e-01,   9.02590000e-01,   9.13585000e-01,
        9.24580000e-01,   9.35575000e-01,   9.46570000e-01,
        9.57565000e-01,   9.68560000e-01,   9.79555000e-01,
        9.90550000e-01,   1.00154500e+00,   1.01254000e+00,
        1.02353500e+00,   1.03453000e+00,   1.04552500e+00,
        1.05652000e+00,   1.06751500e+00,   1.07851000e+00,
        1.08950500e+00,   1.10050000e+00,   1.11149500e+00,
        1.12249000e+00,   1.13348500e+00,   1.14448000e+00,
        1.15547500e+00,   1.16647000e+00,   1.17746500e+00,
        1.18846000e+00,   1.19945500e+00,   1.21045000e+00,
        1.22144500e+00,   1.23244000e+00,   1.24343500e+00,
        1.25443000e+00,   1.26542500e+00,   1.27642000e+00,
        1.28741500e+00,   1.29841000e+00,   1.30940500e+00,
        1.32040000e+00,   1.33139500e+00,   1.34239000e+00,
        1.35338500e+00,   1.36438000e+00,   1.37537500e+00,
        1.38637000e+00,   1.39736500e+00,   1.40836000e+00,
        1.41935500e+00,   1.43035000e+00,   1.44134500e+00,
        1.45234000e+00,   1.46333500e+00,   1.47433000e+00,
        1.48532500e+00,   1.49632000e+00,   1.50731500e+00,
        1.51831000e+00,   1.52930500e+00,   1.54030000e+00,
        1.55129500e+00,   1.56229000e+00,   1.57328500e+00,
        1.58428000e+00,   1.59527500e+00,   1.60627000e+00,
        1.61726500e+00,   1.62826000e+00,   1.63925500e+00,
        1.65025000e+00,   1.66124500e+00,   1.67224000e+00,
        1.68323500e+00,   1.69423000e+00,   1.70522500e+00,
        1.71622000e+00,   1.72721500e+00,   1.73821000e+00,
        1.74920500e+00,   1.76020000e+00,   1.77119500e+00,
        1.78219000e+00,   1.79318500e+00,   1.80418000e+00,
        1.81517500e+00,   1.82617000e+00,   1.83716500e+00,
        1.84816000e+00,   1.85915500e+00,   1.87015000e+00,
        1.88114500e+00,   1.89214000e+00,   1.90313500e+00,
        1.91413000e+00,   1.92512500e+00,   1.93612000e+00,
        1.94711500e+00,   1.95811000e+00,   1.96910500e+00,
        1.98010000e+00,   1.99109500e+00,   2.00209000e+00,
        2.01308500e+00,   2.02408000e+00,   2.03507500e+00,
        2.04607000e+00,   2.05706500e+00,   2.06806000e+00,
        2.07905500e+00,   2.09005000e+00,   2.10104500e+00,
        2.11204000e+00,   2.12303500e+00,   2.13403000e+00,
        2.14502500e+00,   2.15602000e+00,   2.16701500e+00,
        2.17801000e+00,   2.18900500e+00};
    vector<double> actual = { 1.00000000e+000,   1.52299797e-008,   5.38018616e-032,
        4.40853133e-071,   8.37894253e-126,   3.69388307e-196,
        3.77724997e-282,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
        0.00000000e+000,   0.00000000e+000};
public:
    bool testVoigt();
};
bool Testing::testVoigt(){
    Voigt temp;
    
    arma::vec arr = temp.voigtprofile(x, 0.0010000000000000564, 0.0018325000000000008, 0.0);
    for(int i = 0;i<arr.size();i++){
        cout<< arr[i]<<endl;
    }
    bool flag = true;
    for (int i = 0;i<actual.size();i++){
        if( arr[i]!=actual[i])
            flag = false;
    }
    return flag;
    */
};
